// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mcp/tom/v1/tom.proto

package mcp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TomService_CreateItem_FullMethodName            = "/mcp.tom.v1.TomService/CreateItem"
	TomService_GetItem_FullMethodName               = "/mcp.tom.v1.TomService/GetItem"
	TomService_ProcessWellKnownTypes_FullMethodName = "/mcp.tom.v1.TomService/ProcessWellKnownTypes"
)

// TomServiceClient is the client API for TomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TestService provides test operations
type TomServiceClient interface {
	// CreateItem creates a new item
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error)
	// GetItem retrieves an item by ID
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	// Test well-known types handling
	ProcessWellKnownTypes(ctx context.Context, in *ProcessWellKnownTypesRequest, opts ...grpc.CallOption) (*ProcessWellKnownTypesResponse, error)
}

type tomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTomServiceClient(cc grpc.ClientConnInterface) TomServiceClient {
	return &tomServiceClient{cc}
}

func (c *tomServiceClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemResponse)
	err := c.cc.Invoke(ctx, TomService_CreateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tomServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, TomService_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tomServiceClient) ProcessWellKnownTypes(ctx context.Context, in *ProcessWellKnownTypesRequest, opts ...grpc.CallOption) (*ProcessWellKnownTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessWellKnownTypesResponse)
	err := c.cc.Invoke(ctx, TomService_ProcessWellKnownTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TomServiceServer is the server API for TomService service.
// All implementations must embed UnimplementedTomServiceServer
// for forward compatibility.
//
// TestService provides test operations
type TomServiceServer interface {
	// CreateItem creates a new item
	CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error)
	// GetItem retrieves an item by ID
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	// Test well-known types handling
	ProcessWellKnownTypes(context.Context, *ProcessWellKnownTypesRequest) (*ProcessWellKnownTypesResponse, error)
	mustEmbedUnimplementedTomServiceServer()
}

// UnimplementedTomServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTomServiceServer struct{}

func (UnimplementedTomServiceServer) CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedTomServiceServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedTomServiceServer) ProcessWellKnownTypes(context.Context, *ProcessWellKnownTypesRequest) (*ProcessWellKnownTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWellKnownTypes not implemented")
}
func (UnimplementedTomServiceServer) mustEmbedUnimplementedTomServiceServer() {}
func (UnimplementedTomServiceServer) testEmbeddedByValue()                    {}

// UnsafeTomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TomServiceServer will
// result in compilation errors.
type UnsafeTomServiceServer interface {
	mustEmbedUnimplementedTomServiceServer()
}

func RegisterTomServiceServer(s grpc.ServiceRegistrar, srv TomServiceServer) {
	// If the following call pancis, it indicates UnimplementedTomServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TomService_ServiceDesc, srv)
}

func _TomService_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TomServiceServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TomService_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TomServiceServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TomService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TomServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TomService_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TomServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TomService_ProcessWellKnownTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessWellKnownTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TomServiceServer).ProcessWellKnownTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TomService_ProcessWellKnownTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TomServiceServer).ProcessWellKnownTypes(ctx, req.(*ProcessWellKnownTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TomService_ServiceDesc is the grpc.ServiceDesc for TomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.tom.v1.TomService",
	HandlerType: (*TomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _TomService_CreateItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _TomService_GetItem_Handler,
		},
		{
			MethodName: "ProcessWellKnownTypes",
			Handler:    _TomService_ProcessWellKnownTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mcp/tom/v1/tom.proto",
}
